#+title My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /home/imon/.emacs.d/init.el :mkdirp yes

* System Configs
** Configure package archives
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ("org" . "https://orgmode.org/elpa/")
  ("elpa" . "https://elpa.gnu.org/packages/")))

#+end_src

** Configure use package
#+begin_src emacs-lisp

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

#+end_src
** System Clean
*** Move Backup Files to tmp/backups

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups" user-emacs-directory))))

#+end_src

*** Move Auto Save Files to tmp/auto-saves

#+begin_src emacs-lisp

  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (setq create-lockfiles nil)

#+end_src

*** Disable Lockfiles
#+begin_src emacs-lisp

  (setq create-lockfiles nil)

#+end_src

** GC Threshold
Make gc pauses faster by decreasing the threshold.
#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src
** FullSCreen
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

* UI configs
** Basic UI

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (setq indent-tabs-mode nil)

  (menu-bar-mode -1)            ; Disable the menu bar

  (setq inhibit-startup-message t) ;; Disable splash screen

  ;; Set up the visible bell
  ;; (setq visible-bell t)

#+end_src

** Theme Settings
#+begin_src emacs-lisp
  (use-package darktooth-theme
    :init (load-theme 'darktooth t))

  (use-package all-the-icons
	       :config (setq all-the-icons-scal-factor 1.1))

#+end_src
** Rainbow Delimiters
This package colorizes brackets like rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
** ANSI color
#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
#+end_src
** Extra settings
*** Prevent UI Dialogs
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

*** Auto Revert File
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
 
*** Remember last cursor location
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Font Face and Transparency

#+begin_src emacs-lisp

  (defvar myconfig/frame-transparency '(97 . 97))
  (defvar myconfig/default-font-size 103)
  (defvar myconfig/default-variable-font-size 103)

  (set-frame-parameter (selected-frame) 'alpha myconfig/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,myconfig/frame-transparency))

  (set-face-attribute 'default nil :font "Jetbrains Mono" :height myconfig/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height myconfig/default-font-size)
  (set-face-attribute 'variable-pitch nil :font "Jetbrains Mono" :height myconfig/default-variable-font-size :weight 'regular)

#+end_src


* Keyboard Setup
** Which key
#+begin_src emacs-lisp

  (use-package which-key
    :ensure t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src
* Ido & SMEX
** IDO (Interactively Do Things)
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (setq ido-use-filename-at-point 'guess)
#+end_src
** SMEX
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :config
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))
;; modify smex so that typing a space in smex inserts a hyphen '-'
  (defadvice smex (around space-inserts-hyphen activate compile)
    (let ((ido-cannot-complete-command 
	   `(lambda ()
	      (interactive)
	      (if (string= " " (this-command-keys))
		  (insert ?-)
		(funcall ,ido-cannot-complete-command)))))
      ad-do-it))
#+end_src
* Org Mode
** Org Font Setup
#+begin_src emacs-lisp

  (defun myconfig/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.35)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.0)
                    (org-level-6 . 0.90)
                    (org-level-7 . 0.8)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Jetbrains Mono" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Org Mode setup
#+begin_src emacs-lisp

  (defun myconfig/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

** Org Mode
#+begin_src emacs-lisp

    (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . myconfig/org-mode-setup)
      :config
;;    (setq org-ellipsis " ▾")
      (setq org-clock-sound "~/my-configs/emacs/pomodoroding.wav")
      (myconfig/org-font-setup))
#+end_src 

** Org Templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("cp" . "src c"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/roamnotes")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n d n" . org-roam-dailies-capture-today)
           ("C-c n d y" . org-roam-dailies-capture-yesterday)
           ("C-c n d d" . org-roam-dailies-capture-date)
           ("C-c n d p" . org-roam-dailies-goto-previous-note)
           ("C-c n d n" . org-roam-dailies-goto-next-note)
           ("C-c n d T" . org-roam-dailies-goto-today)
           ("C-c n d Y" . org-roam-dailies-goto-yesterday)
           ("C-c n d D" . org-roam-dailies-goto-date))
    :config
    (org-roam-setup))
#+end_src
 
* Var Tools
** Eshell
#+begin_src emacs-lisp
    ;; Eshell customization function
    (defun myconfig/configure-eshell ()
      ;; Save command history when commands are entered
      (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

      ;; Truncate buffer for performance
      (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

      (setq eshell-history-size         10000
            eshell-buffer-maximum-lines 10000
            eshell-hist-ignoredups t
            eshell-scroll-to-bottom-on-input t))

  (use-package eshell
    :ensure t
    :hook (eshell-first-time-mode . myconfig/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src
** Dired use-package

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))
#+end_src
** Dired Single

This is a very important packages for me. Because I like to open only one dired buffer. This prevents dired from creating new buffer every time a folder is open or go back to parent folder.

#+begin_src emacs-lisp
  (use-package dired-single
    :ensure t)

  (defun my-dired-init ()
    (define-key dired-mode-map [remap dired-find-file]
      'dired-single-buffer)
    (define-key dired-mode-map [remap dired-mouse-find-file-other-window]
      'dired-single-buffer-mouse)
    (define-key dired-mode-map [remap dired-up-directory]
      'dired-single-up-directory))

  (if (boundp 'dired-mode-map)
      (my-dired-init)
    (add-hook 'dired-load-hook 'my-dired-init))

  ;; Hiding dotfiles
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))
#+end_src

** Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src

** hl-todo
#+begin_src emacs-lisp

  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :init
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold)))
    :config
    (global-set-key (kbd "C-c o") 'hl-todo-occur)
    (global-set-key (kbd "C-c i") 'hl-todo-insert))

  (use-package magit-todos
    :ensure t
    :bind ("C-c t" . ivy-magit-todos))

#+end_src
** Ace Jump
#+begin_src emacs-lisp
    (use-package ace-jump-mode
      :ensure t
      :bind ("C-;" . ace-jump-mode))
#+end_src

** Magit
#+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :hook (magit . magit-todos-mode))
#+end_src
** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers
      (append flycheck-disabled-checkers
              '(javascript-jshint json-jsonlist)))
    (flycheck-add-mode 'javascript-eslint 'web-mode))
  (add-hook 'after-init-hook #'global-flycheck-mode)

#+end_src
 
** Tab config

#+begin_src emacs-lisp

  (setq-default tab-width 2)

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :custom
    (company-minimum-prefix-length 1)
    (comapny-idle-delay 0.0))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))

  (add-hook 'prog-mode-hook 'company-mode)

#+end_src

** Paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (defun myconfig/mode-space-delimiter-p (endp delimiter)
      "Don't insert a space before delimiters in certain modes
                            https://github.com/chadhs/dotfiles/blob/master/editors/emacs-config.org#paredit"
      (or
       (bound-and-true-p js2-mode)
       (bound-and-true-p js-mode)
       (bound-and-true-p javascript-mode)))
    (add-to-list 'paredit-space-for-delimiter-predicates #'my-config/mode-space-delimiter-p))

  (add-hook 'clojure-mode-hook          'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook       'enable-paredit-mode)
  (add-hook 'cider-mode-hook            'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           'enable-paredit-mode)

#+end_src

** Projectile
#+begin_src emacs-lisp
	(use-package projectile
		:diminish projectile-mode
		:config (projectile-mode)
		:bind-keymap
		("C-c p" . projectile-command-map)
		:init
	  (setq projectile-indexing-method 'native)
		(setq projectile-project-search-path '("~/codes/c/" "~/codes/cpp" "~/codes/clojure" "~/codes/dotnet" "~/codes/erlang" "~/codes/flutter" "~/codes/elixir" "~/codes/go" "~/codes/haskell" "~/codes/java" "~/codes/ocaml/" "~/codes/python" "~/codes/rust" "~/codes/nodejs/" "~/codes/web"))
		(setq projectile-switch-project-action #'projectile-find-file))

#+end_src

** code folding
    #+BEGIN_SRC emacs-lisp
      (use-package hideshow
        :ensure t
        :hook (prog-mode . hs-minor-mode)
        :init
        (setq hs-hide-comments nil)
        :config (global-set-key (kbd "C-+") 'hs-toggle-hiding))
    #+END_SRC

** indentation highlighting
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indent-guides
        :defer t
        :hook ((prog-mode . highlight-indent-guides-mode))
        :diminish highlight-indent-guides-mode
        :config
        (setq highlight-indent-guides-method 'character
              highlight-indent-guides-responsive 'top))
    #+END_SRC
    
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (setq yas-snippet-dirs '("/home/imon/my-configs/emacs/mysnippets")))

  (yas-global-mode 1)
  (add-hook 'yas-minor-mode-hook (lambda ()
                                   (yas-activate-extra-mode 'fundamental-mode)))
  (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
#+end_src

** Drag stuff
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-define-keys)
    (drag-stuff-global-mode))
#+end_src

** LSP Mode
#+begin_src emacs-lisp

   (defun efs/lsp-mode-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode))

   (use-package lsp-mode
     :commands (lsp lsp-deferred)
     :hook (lsp-mode . efs/lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
     :config
     (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-show-diagnostics t)
	  (setq lsp-ui-sideline-show-symbol nil)
    (setq lsp-ui-sideline-show-hover t)
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 1)
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-doc-show-with-cursor nil) 
    (setq lsp-ui-doc-show-with-mouse t)
    (setq lsp-ui-doc-position "Bottom")
    (setq lsp-ui-imenu-auto-refresh t)
    (setq lsp-ui-imenu-refresh-delay 1))

   (use-package lsp-ivy
     :after lsp)


#+end_src

* Language Modes
** CC Mode
#+begin_src emacs-lisp

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  (setq c-default-style "linux"
        c-basic-offset 2)
  (use-package flycheck-pkg-config
    :ensure t)

#+end_src

** Clojure Mode
#+begin_src emacs-lisp
  (use-package clojure-mode)
  (use-package cider
	  :ensure t)
  (use-package flycheck-clj-kondo
	  :ensure t)
#+end_src

** C_Sharp Mode
#+begin_src emacs-lisp
      (use-package csharp-mode
        :ensure t
        :hook (csharp-mode . lsp-deferred)
        :config (setq tab-width 4))
#+end_src
 
** JS2 Mode

#+begin_src emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :init (electric-pair-mode 1)
    :hook (js2-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))
#+end_src

** RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode "\\.jsx\\'"
    :hook (rjsx-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))
#+end_src
 
** Vue Mode
#+begin_src emacs-lisp
  (use-package vue-mode
    :ensure t
    :hook ((vue-mode . lsp-deferred)
           (vue-mode . prettier-js-mode))
    :config
    (setq prettier-js-args '("--parser vue")))
#+end_src
 
** Dart + Flutter

#+begin_src emacs-lisp


  (use-package dart-mode
    ;; Optional
    :hook (dart-mode . flutter-test-mode)
    :config
    (setq lsp-dart-flutter-sdk-dir "/home/imon/snap/flutter/common/flutter/")
    (setq lsp-dart-sdk-dir "/home/imon/snap/flutter/common/flutter/bin/cache/dart-sdk/"))

  (use-package flutter
    :after dart-mode
    :bind (:map dart-mode-map
                ("C-M-x" . #'flutter-run-or-hot-reload)))

  (use-package lsp-dart
    :ensure t
    :hook (dart-mode . lsp))

#+end_src

** Typescript Mode

#+begin_src emacs-lisp
   (use-package typescript-mode
    :mode "\\.ts[x]?\\'"
    :config
    (setq typescript-indent-level 2))
#+end_src
 
** Haskell Mode
#+begin_src emacs-lisp

    (use-package haskell-mode
      :ensure t
      :hook (haskell-mode . lsp-deferred)
      :config
      (setq lsp-headerline-breadcrumb-icons-enable nil))

    (use-package lsp-haskell ;; LSP does not suppor Haskell by Default
      :ensure t)

    (use-package hindent
      :hook (haskell-mode . hindent-mode))

    ;; (add-hook 'haskell-mode-hook #'hindent-mode)

#+end_src

** Erlang Mode
#+begin_src emacs-lisp
  (use-package erlang
    :ensure t)
#+end_src
 
** Prolog Mode
#+begin_src emacs-lisp
		(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
		(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
		(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
		(setq prolog-system 'swi)
		(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
																		("\\.m$" . mercury-mode))
																	 auto-mode-alist))
#+end_src

** Python
#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python3"))

#+end_src

** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook (go-mode . lsp-deferred))
#+end_src
 
** Markup Modes
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t))

  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'js2-mode-hook 'emmet-mode)
#+end_src
 
** Rustic Mode
#+begin_src emacs-lisp
  (use-package rustic
    :ensure t
	  :hook (rustic-mode . lsp-deferred)
    :bind (:map rustic-mode-map
                ("C-c C-c l" . flycheck-list-errors)
                ("C-c C-c s" . lsp-rust-analyzer-status))
    :config (setq rustic-format-on-save t))
#+end_src
 
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :hook (json-mode . lsp-deferred))
#+end_src

