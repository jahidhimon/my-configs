+title My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /home/imon/.emacs.d/init.el :mkdirp yes

* System Configs
** Configure package archives
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ("org" . "https://orgmode.org/elpa/")
  ("elpa" . "https://elpa.gnu.org/packages/")))

#+end_src

** Configure use package
#+begin_src emacs-lisp

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

#+end_src

** Auto ensure and auto update
#+begin_src emacs-lisp
    (setq use-package-always-ensure t)

    (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))


#+end_src

** System Clean
*** Move Backup Files to tmp/backups

#+begin_src emacs-lisp

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups" user-emacs-directory))))

#+end_src

*** Move Auto Save Files to tmp/auto-saves

#+begin_src emacs-lisp

  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions" user-emacs-directory)
        auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

  (setq create-lockfiles nil)

#+end_src

*** Disable Lockfiles

#+begin_src emacs-lisp

  (setq create-lockfiles nil)

#+end_src

** GC Threshold

Make gc pauses faster by decreasing the threshold.

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

** FullSCreen
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

* UI configs
** Basic UI

#+begin_src emacs-lisp

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (setq indent-tabs-mode nil)

  (menu-bar-mode -1)            ; Disable the menu bar

  (setq inhibit-startup-message t) ;; Disable splash screen

  ;; Set up the visible bell
  ;; (setq visible-bell t)

#+end_src

** Font Face and Transparency

#+begin_src emacs-lisp

  (defun myconfig/set-font-face ()
    "This is somewhat documentation."
    (defvar myconfig/frame-transparency '(97 . 97))
    (defvar myconfig/default-font-size 103)
    (defvar myconfig/default-variable-font-size 103)

    (set-frame-parameter (selected-frame) 'alpha myconfig/frame-transparency)
    (add-to-list 'default-frame-alist `(alpha . ,myconfig/frame-transparency))

    (set-face-attribute 'default nil :font "Jetbrains Mono" :height myconfig/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Jetbrains Mono" :height myconfig/default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Jetbrains Mono" :height myconfig/default-variable-font-size :weight 'regular))

#+end_src

** Daemon Config

#+begin_src emacs-lisp

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  ;; (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (myconfig/set-font-face))))
    (myconfig/set-font-face))

#+end_src

** Modeline and Theme
*** Theme and All the Icons
#+begin_src emacs-lisp
  (use-package darktooth-theme
    :ensure t)

  (use-package doom-themes
    :ensure t)

  (use-package zenburn-theme
    :ensure t)

  (load-theme 'doom-solarized-dark-high-contrast t)

  (use-package all-the-icons
    :config (setq all-the-icons-scale-factor 1.1))

#+end_src
*** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 18)))
#+end_src

** Rainbow Delimiters
This package colorizes brackets like rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** ANSI Color
#+begin_src emacs-lisp
  (require 'ansi-color)
  (defun my/ansi-colorize-buffer ()
    (let ((buffer-read-only nil))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
#+end_src

** Extra settings
*** Prevent UI Dialogs
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

*** Auto Revert File
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src
 
*** Remember last cursor location
#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src
 
* Keyboard Setup
** Which key

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

* Ivy and Counsel
** Ivy Setup

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

#+end_src

** Ivy rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

#+end_src

** Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (:map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Ivy precsient

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Flyspell Mode
** Buffer specific
#+begin_src emacs-lisp

  (defun flyspell-on-for-buffer-type ()
        (interactive)
        (if (not (symbol-value flyspell-mode)) ; if not already on
    (progn
      (if (derived-mode-p 'prog-mode)
        (progn
          (message "Flyspell on (code)")
          (flyspell-prog-mode))
        ;; else
        (progn
          (message "Flyspell on (text)")
          (flyspell-mode 1)))
      ;; I tried putting (flyspell-buffer) here but it didn't seem to work
      )))

#+end_src

** Auto save functions
#+begin_src emacs-lisp
  (defun append-aspell-word (new-word)
   (let ((header "personal_ws-1.1")
         (file-name (substitute-in-file-name "$HOME/.aspell.en.pws"))
         (read-words (lambda (file-name)
                      (let ((all-lines (with-temp-buffer
                                        (insert-file-contents file-name)
                                        (split-string (buffer-string) "\n" t))))
                       (if (null all-lines)
                         ""
                        (split-string (mapconcat 'identity (cdr all-lines) "\n")
                                      nil 
                                      t))))))
    (when (file-readable-p file-name)
     (let* ((cur-words (eval (list read-words file-name)))
            (all-words (delq header (cons new-word cur-words)))
            (words (delq nil (remove-duplicates all-words :test 'string=))))
      (with-temp-file file-name     
       (insert (concat header 
                       " en "
                       (number-to-string (length words))
                       "\n"
                       (mapconcat 'identity (sort words #'string<) "\n"))))))
    (unless (file-readable-p file-name)
     (with-temp-file file-name
      (insert (concat header " en 1\n" new-word "\n")))))
   (ispell-kill-ispell t) ; restart ispell
   (flyspell-mode)
   (flyspell-mode))

  (defun append-aspell-current ()
   "Add current word to aspell dictionary"
   (interactive)
   (append-aspell-word (thing-at-point 'word)))

#+end_src
 
** Flycheck mode use-package
#+begin_src emacs-lisp

  (use-package flyspell
    :ensure t
    :config (setq flyspell-issue-message-flag nil))

#+end_src

* Org Mode
** Org Font Setup
#+begin_src emacs-lisp

  (defun myconfig/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.35)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.0)
                    (org-level-6 . 0.90)
                    (org-level-7 . 0.8)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "Jetbrains Mono" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Org Mode setup
#+begin_src emacs-lisp

  (defun myconfig/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

** Org Mode
#+begin_src emacs-lisp

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . myconfig/org-mode-setup)
    :custom
    (org-ellipsis " â–¾")
    (org-clock-sound "~/my-configs/emacs/pomodoroding.wav")
    (org-agenda-files
     '("~/codes/orgs/Tasks.org"
       "~/codes/orgs/Habits.org"))
    (org-load-done 'time)
    (org-refile-targets
     '(("Archives.org" :maxlevel . 1)))
    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
    (myconfig/org-font-setup))
#+end_src 

** Org Templates

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("cp" . "src c"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/roamnotes")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n d n" . org-roam-dailies-capture-today)
           ("C-c n d y" . org-roam-dailies-capture-yesterday)
           ("C-c n d d" . org-roam-dailies-capture-date)
           ("C-c n d p" . org-roam-dailies-goto-previous-note)
           ("C-c n d n" . org-roam-dailies-goto-next-note)
           ("C-c n d T" . org-roam-dailies-goto-today)
           ("C-c n d Y" . org-roam-dailies-goto-yesterday)
           ("C-c n d D" . org-roam-dailies-goto-date))
    :config
    (org-roam-setup))
#+end_src

** Org Pomodor
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :custom-face
    (org-pomodoro-mode-line ((t (:inherit warning))))
    (org-pomodoro-mode-line-overtime ((t (:inherit error))))
    (org-pomodoro-mode-line-break ((t (:inherit success))))
    :bind (:map org-mode-map
           ("C-c C-x m" . org-pomodoro)))

#+end_src

** Pomidor
#+begin_src emacs-lisp

  ;; A Simple and cool pomodoro timer
  (use-package pomidor
    :ensure t
    :bind (("<f12>" . pomidor))
    :init
    (setq alert-default-style 'mode-line)
    :config
    (setq pomidor-sound-tick nil)
    (setq pomidor-sound-tack nil)
    (setq pomidor-seconds (* 25 60))
    (setq pomidor-break-seconds (* 5 60))
    (setq pomidor-breaks-before-long 3)
    (setq pomidor-long-break-seconds (* 20 60)))

#+end_src
* Shell Modes
** Eshell configuration Function
#+begin_src emacs-lisp
(defun myconfig/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))
#+end_src

** Eshell Git Prompt

#+begin_src emacs-lisp
(use-package eshell-git-prompt
  :after eshell)

#+end_src

** Eshell use-package
#+begin_src emacs-lisp
(use-package eshell
  :hook (eshell-first-time-mode . myconfig/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'multiline2))
#+end_src

* Dired
** Dired use-package

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

#+end_src

** Dired Single

This is a very important packages for me. Because I like to open only one dired buffer. This prevents dired from creating new buffer every time a folder is open or go back to parent folder.

#+begin_src emacs-lisp
	(use-package dired-single
	:ensure t)

	(defun my-dired-init ()
		(define-key dired-mode-map [remap dired-find-file]
			'dired-single-buffer)
		(define-key dired-mode-map [remap dired-mouse-find-file-other-window]
			'dired-single-buffer-mouse)
		(define-key dired-mode-map [remap dired-up-directory]
			'dired-single-up-directory))

		(if (boundp 'dired-mode-map)
				(my-dired-init)
			(add-hook 'dired-load-hook 'my-dired-init))

#+end_src

** Dired all the icons

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Opening file with dired

#+begin_src emacs-lisp
(use-package dired-open
  :commands (dired dired-jump)
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv"))))
#+end_src

** Hiding dotfiles

#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))
#+end_src

* Editing Tools
** Multiple Cursors
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src

** hl-todo
#+begin_src emacs-lisp

      (use-package hl-todo
        :hook (prog-mode . hl-todo-mode)
        :init
        (setq hl-todo-highlight-punctuation ":"
              hl-todo-keyword-faces
              `(("TODO"       warning bold)
                ("FIXME"      error bold)
                ("HACK"       font-lock-constant-face bold)
                ("REVIEW"     font-lock-keyword-face bold)
                ("NOTE"       success bold)
                ("DEPRECATED" font-lock-doc-face bold)))
        :config
        (global-set-key (kbd "C-c o") 'hl-todo-occur)
        (global-set-key (kbd "C-c i") 'hl-todo-insert))

    (use-package magit-todos
      :ensure t
      :bind ("C-c t" . ivy-magit-todos))

#+end_src

** Ace Jump
#+begin_src emacs-lisp
    (use-package ace-jump-mode
      :ensure t
      :bind ("C-;" . ace-jump-mode))
#+end_src
 
** Ace Window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window)
    :config
    (ace-window-display-mode nil)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
 
** Diff hl
#+begin_src emacs-lisp
  (use-package diff-hl
    :custom-face
    (diff-hl-change ((t (:foreground ,(face-background 'highlight) :background nil))))
    (diff-hl-insert ((t (:inherit diff-added :background nil))))
    (diff-hl-delete ((t (:inherit diff-removed :background nil))))
    :bind (:map diff-hl-command-map
           ("SPC" . diff-hl-mark-hunk))
    :hook ((after-init . global-diff-hl-mode)
           (dired-mode . diff-hl-dired-mode))
    :init (setq diff-hl-draw-borders nil)
    :config
    ;; Highlight on-the-fly
    (diff-hl-flydiff-mode 1)

    ;; Set fringe style
    (setq-default fringes-outside-margins nil)
    (diff-hl-margin-mode 1)

     (with-no-warnings
      (defun my-diff-hl-fringe-bmp-function (_type _pos)
        "Fringe bitmap function for use as `diff-hl-fringe-bmp-function'."
        (define-fringe-bitmap 'my-diff-hl-bmp
          (vector #b11111100)
          1 16
          '(center t)))
      (setq diff-hl-fringe-bmp-function #'my-diff-hl-fringe-bmp-function)


      ;; Integration with magit
      (with-eval-after-load 'magit
        (add-hook 'magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
        (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))))

#+end_src
  
* Programming tools and Tweaks
** Magit
#+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :hook (magit . magit-todos-mode))
#+end_src

** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers
      (append flycheck-disabled-checkers
              '(javascript-jshint json-jsonlist)))
    (flycheck-add-mode 'javascript-eslint 'web-mode))
  (add-hook 'after-init-hook #'global-flycheck-mode)

#+end_src
 
** Tab config

#+begin_src emacs-lisp

  (setq-default tab-width 2)

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :custom
    (company-minimum-prefix-length 1)
    (comapny-idle-delay 0.4))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))

  (add-hook 'prog-mode-hook 'company-mode)

#+end_src

** Paredit
#+begin_src emacs-lisp
  (use-package paredit
	       :ensure t
	  :config
		  (defun myconfig/mode-space-delimiter-p (endp delimiter)
			  "Don't insert a space before delimiters in certain modes
		    https://github.com/chadhs/dotfiles/blob/master/editors/emacs-config.org#paredit"
			  (or
			   (bound-and-true-p js2-mode)
			   (bound-and-true-p js-mode)
			   (bound-and-true-p javascript-mode)))
		  (add-to-list 'paredit-space-for-delimiter-predicates #'my-config/mode-space-delimiter-p))

  (add-hook 'clojure-mode-hook          'enable-paredit-mode)
  (add-hook 'cider-repl-mode-hook       'enable-paredit-mode)
  (add-hook 'cider-mode-hook            'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           'enable-paredit-mode)

#+end_src

** Projectile
#+begin_src emacs-lisp
   (use-package projectile
     :diminish projectile-mode
     :config (projectile-mode)
     :bind-keymap
     ("C-c p" . projectile-command-map)
     :init
     (setq projectile-indexing-method 'native)
     (setq projectile-project-search-path
           '("~/codes/c/" "~/codes/cpp" "~/codes/clojure" "~/codes/elixir" "~/codes/go" "~/codes/haskell" "~/codes/nodejs/" "~/codes/py/"
             "~/codes/web" "~/codes/shell/"))
     (setq projectile-switch-project-action #'projectile-find-file))

   (use-package counsel-projectile ;; This package binds counsel and projectile together
     :config (counsel-projectile-mode))

#+end_src

** LSP Mode
#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :ensure t
    :config
    (setq lsp-ui-sideline-enable nil)
    (setq lsp-ui-sideline-show-diagnostics nil)
    (setq lsp-ui-sideline-show-symbol nil)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-sideline-show-code-actions nil)
    (setq lsp-ui-sideline-delay 1)
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-doc-show-with-cursor nil) 
    (setq lsp-ui-doc-show-with-mouse t)
    (setq lsp-ui-doc-position "Bottom")
    (setq lsp-ui-imenu-auto-refresh t)
    (setq lsp-ui-imenu-refresh-delay 1))

  (use-package lsp-ivy
    :after lsp-mode
    :bind (:map lsp-mode-map
                ([remap xref-find-apropos] . lsp-ivy-workspace-symbol)
                ("C-M-s" . lsp-ivy-global-workspace-symbol)))


#+end_src

** DAP mode
#+begin_src emacs-lisp
  (use-package dap-mode
    :defines dap-python-executable
    :ensure t
    :bind (:map lsp-mode-map
                ("<f5>" . dap-debug)
                ("C-c l d" . dap-hydra))
    :hook ((after-init . dap-auto-configure-mode)
           (python-mode . (lambda () (require 'dap-python)))
           (go-mode . (lambda () (require 'dap-go)))
           ((c-mode c++-mode) . (lambda () (require 'dap-lldb)))
           ((js-mode rjsx-mode js2-mode) . (lambda () (require 'dap-node)))
           (typescript-mode . (lambda () (require 'dap-node)))
           (elixir-mode . (lambda () (require 'dap-elixir))))
    :init
    (when (executable-find "python3")
      (setq dap-python-executable "python3"))
    :custom
    (dap-auto-configure-features '(locals tooltip)))
#+end_src
 
** code folding
    #+BEGIN_SRC emacs-lisp
			(use-package hideshow
			 :ensure t
			 :hook (prog-mode . hs-minor-mode)
			 :init
			 (setq hs-hide-comments nil)
			 :config (global-set-key (kbd "C-+") 'hs-toggle-hiding))
    #+END_SRC

** indentation highlighting
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indent-guides
        :defer t
        :hook ((prog-mode . highlight-indent-guides-mode))
        :diminish highlight-indent-guides-mode
        :config
        (setq highlight-indent-guides-method 'character
              highlight-indent-guides-responsive 'top))
    #+END_SRC
    
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (setq yas-snippet-dirs '("/home/imon/my-configs/emacs/mysnippets")))

  (yas-global-mode 1)
  (add-hook 'yas-minor-mode-hook (lambda ()
                                   (yas-activate-extra-mode 'fundamental-mode)))
  (define-key yas-minor-mode-map (kbd "C-c y") #'yas-expand)
#+end_src

** Drag stuff
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :config
    (drag-stuff-define-keys)
    (drag-stuff-global-mode))
#+end_src
 
* Language Modes
** CC Mode
#+begin_src emacs-lisp

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  (setq c-default-style "linux"
        c-basic-offset 2)
  (use-package flycheck-pkg-config
    :ensure t)

#+end_src

** Clojure Mode
#+begin_src emacs-lisp
		(use-package clojure-mode)
		(use-package cider
			:ensure t)
		(use-package flycheck-clj-kondo
			:ensure t)
#+end_src

** Elixir Mode
#+begin_src emacs-lisp
  (use-package elixir-mode
    :ensure t
    :hook (elixir-mode . lsp-deferred))

  (use-package reformatter
    :ensure t
    :config
    ;; Adds a reformatter configuration called "+elixir-format"
    ;; This uses "mix format -"
    (reformatter-define +elixir-format
                        :program "mix"
                        :args '("format" "-"))
    ;; defines a function that looks for the .formatter.exs file used by mix format
    (defun +set-default-directory-to-mix-project-root (original-fun &rest args)
      (if-let* ((mix-project-root (and buffer-file-name
                                       (locate-dominating-file buffer-file-name
                                                               ".formatter.exs"))))
          (let ((default-directory mix-project-root))
            (apply original-fun args))
        (apply original-fun args)))
    ;; adds an advice to the generated function +elxir-format-region that sets the proper root dir
    ;; mix format needs to be run from the root directory otherwise it wont use the formatter configuration
    (advice-add '+elixir-format-region :around #'+set-default-directory-to-mix-project-root)
    ;; Adds a hook to the major-mode that will add the generated function +elixir-format-on-save-mode
    ;; So, every time we save an elixir file it will try to find a .formatter.exs and then run mix format from
    ;; that file's directory
    (add-hook 'elixir-mode-hook #'+elixir-format-on-save-mode))

#+end_src
 
** JS2 Mode

#+begin_src emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :init (electric-pair-mode 1)
    :hook (js2-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))
#+end_src

** RJSX mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :mode "\\.jsx\\'"
    :hook (rjsx-mode . lsp-deferred)
    :config
    (setq js-indent-level 2))
#+end_src
 
** Typescript Mode

#+begin_src emacs-lisp
  (use-package typescript-mode
   :mode "\\.ts[x]?\\'"
   :hook(typescript-mode . lsp-deferred)
   :config
   (setq typescript-indent-level 2))
#+end_src
 
** Haskell Mode
#+begin_src emacs-lisp

  (use-package haskell-mode
    :ensure t
    :hook (haskell-mode . lsp-deferred)
    :config
    (setq lsp-headerline-breadcrumb-icons-enable nil))

  (use-package lsp-haskell ;; LSP does not suppor Haskell by Default
    :ensure t)

  (use-package hindent
	       :ensure t
    :hook (haskell-mode . hindent-mode))

  ;; (add-hook 'haskell-mode-hook #'hindent-mode)

#+end_src

** Python
#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    (flycheck-python-flake8-executable "flake8")
    (lsp-pylsp-plugins-autopep8-enabled t)
    :config
    (flycheck-select-checker 'python-flake8)
    (require 'dap-python))

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src

** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :hook (go-mode . lsp-deferred))
#+end_src
 
** Markup Modes
#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t))

  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'js2-mode-hook 'emmet-mode)
#+end_src
 
** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :hook (json-mode . lsp-deferred))
#+end_src

** SQL mode
#+begin_src emacs-lisp
      (use-package sqlup-mode
        :ensure t
        :config
        (add-hook 'sql-interactive-mode-hook 'sqlup-mode)
        (add-to-list 'sqlup-blacklist "name")
        (add-to-list 'sqlup-blacklist "id")
        (add-to-list 'sqlup-blacklist "year")
        (add-to-list 'sqlup-blacklist "version"))

      (use-package sql-indent
        :ensure t)

      (use-package sql
        :init
        (setq sql-set-product 'postgres)
        :config
        (add-hook 'sql-mode-hook 'sqlup-mode)
        (add-hook 'sql-mode-hook 'sqlind-minor-mode))

#+end_src
** Python
#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    (flycheck-python-flake8-executable "flake8")
    (lsp-pylsp-plugins-autopep8-enabled t)
    :config
    (flycheck-select-checker 'python-flake8)
    (require 'dap-python))

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src


** Shell Mode
#+begin_src emacs-lisp
  (use-package sh-script
    :hook (sh-mode . lsp-deferred)
    :config
    (setq sh-basic-offset 2))
#+end_src
* Other Tools
** Perspective
#+begin_src emacs-lisp
  ;; (use-package perspective								
  ;;   :ensure t
  ;;   :bind (("C-x k" . persp-kill-buffer*)
  ;;          ("C-x b" . persp-counsel-switch-buffer))
  ;;   :init
  ;;   (persp-mode))
#+end_src
** RestClient mode
#+begin_src emacs-lisp
  (use-package restclient
    :mode (("\\.http\\'" . restclient-mode)))
#+end_src
** Multi Occur Mode
Occur mode is a useful replacement for GNU grep, Like grep, the occur command will take a regular expression and print, in a separate buffer.

Another useful feature is its support for the compilation mode commands next/previous-error (M-g M-n and M-g M-p respectively), as they enable you to cycle through the list of occur matches from within the source buffer itself.

In a similar vein, you can enable follow mode in the *Occur* buffer by pressing C-c C-f, and future calls to M-n and M-p in the *Occur* buffer will automatically jump to the correct match in the source buffer.

In Emacs 28.1 "M-n" and "M-p" became "n" and "p".
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'cl))

  (defun get-buffers-matching-mode (mode)
    "Returns a list of buffers where their major-mode is equal to MODE"
    (let ((buffer-mode-matches '()))
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (when (eq mode major-mode)
            (push buf buffer-mode-matches))))
      buffer-mode-matches))


  (defun multi-occur-in-this-mode ()
    "Show all lines matching REGEXP in buffers with this major mode."
    (interactive)
    (multi-occur
     (get-buffers-matching-mode major-mode)
     (car (occur-read-primary-args))))

  ;; global key for `multi-occur-in-this-mode' - you should change this.
  (global-set-key (kbd "C-M-s") 'multi-occur-in-this-mode)
#+end_src
